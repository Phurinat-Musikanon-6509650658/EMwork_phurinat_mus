require('dotenv').config();
const express = require('express');
const mysql = require('mysql2/promise'); // ‡πÉ‡∏ä‡πâ mysql2/promise ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö async/await
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
app.use(cors());
app.use(bodyParser.json());

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MySQL
const db = mysql.createPool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASS,
    database: process.env.DB_NAME
});

// üìå API: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/leaves', async (req, res) => {
    try {
        const [rows] = await db.execute('SELECT * FROM leave_requests ORDER BY createdAt DESC');
        res.json(rows);
    } catch (err) {
        console.error('‚ùå Error fetching data:', err);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }
});

// üìå API: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î
app.post('/leaves', async (req, res) => {
    const { name, phone, leaveType, reason, startDate, endDate } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!name || !phone || !leaveType || !reason || !startDate || !endDate) {
        return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const today = new Date().toISOString().split('T')[0];
    if (startDate < today) {
        return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ" });
    }
    if (leaveType === '‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô') {
        const diffDays = (new Date(startDate) - new Date(today)) / (1000 * 60 * 60 * 24);
        const leaveDays = (new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24) + 1;
        if (diffDays < 3) {
            return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ß‡∏±‡∏ô" });
        }
        if (leaveDays > 2) {
            return res.status(400).json({ error: "‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏±‡∏ô" });
        }
    }

    try {
        const sql = 'INSERT INTO leave_requests (name, phone, leaveType, reason, startDate, endDate) VALUES (?, ?, ?, ?, ?, ?)';
        const [result] = await db.execute(sql, [name, phone, leaveType, reason, startDate, endDate]);
        
        res.json({
            message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            leave: {
                id: result.insertId,
                name,
                phone,
                leaveType,
                reason,
                startDate,
                endDate,
                status: '‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤', // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                createdAt: today
            }
        });
    } catch (err) {
        console.error('‚ùå Error inserting data:', err);
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
});

// üìå API: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤
app.put('/leaves/:id/status', async (req, res) => {
    const { status } = req.body;
    const { id } = req.params;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
    if (!status || !['‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'].includes(status)) {
        return res.status(400).json({ error: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    try {
        const sql = 'UPDATE leave_requests SET status = ? WHERE id = ?';
        const [result] = await db.execute(sql, [status, id]);
        
        if (result.affectedRows === 0) {
            return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ" });
        }

        res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } catch (err) {
        console.error('‚ùå Error updating status:', err);
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" });
    }
});

// üìå API: ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î
app.delete('/leaves/:id', async (req, res) => {
    const { id } = req.params;

    try {
        const sql = 'DELETE FROM leave_requests WHERE id = ?';
        const [result] = await db.execute(sql, [id]);

        if (result.affectedRows === 0) {
            return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡∏ô‡∏µ‡πâ" });
        }

        res.json({ message: "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } catch (err) {
        console.error('‚ùå Error deleting data:', err);
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
});

// üìå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const PORT = 5000;
app.listen(PORT, () => {
    console.log(`üöÄ Server is running on http://localhost:${PORT}`);
});
