import React, { useState, useEffect } from 'react';
import axios from 'axios';

const LeaveList = () => {
    const [leaves, setLeaves] = useState([]);
    const [filteredLeaves, setFilteredLeaves] = useState([]);
    const [searchQuery, setSearchQuery] = useState("");

    // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î
    const fetchLeaves = async () => {
        try {
            const response = await axios.get('http://localhost:5000/leaves');
            setLeaves(response.data);
            setFilteredLeaves(response.data);  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        } catch (error) {
            console.error(error);
        }
    };

    // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏•‡∏≤
    const handleSearch = (e) => {
        const query = e.target.value;
        setSearchQuery(query);
        if (query === "") {
            setFilteredLeaves(leaves);
        } else {
            const result = leaves.filter(leave =>
                leave.name.toLowerCase().includes(query.toLowerCase()) ||
                leave.startDate.includes(query)
            );
            setFilteredLeaves(result);
        }
    };

    // üìå ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetchLeaves ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î
    useEffect(() => {
        fetchLeaves();
    }, []);

    // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleDelete = async (id) => {
        const confirmDelete = window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ?");
        if (confirmDelete) {
            try {
                const response = await axios.delete(`http://localhost:5000/leaves/${id}`);
                alert(response.data.message);
                // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏•‡∏≤
                fetchLeaves();
            } catch (error) {
                console.error(error);
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            }
        }
    };

    // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤
    const handleApprove = async (id, newStatus) => {
        try {
            // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
            const response = await axios.put(`http://localhost:5000/leaves/${id}`, {
                status: newStatus
            });

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            const updatedLeaves = leaves.map((leave) => 
                leave.id === id ? { ...leave, status: newStatus } : leave
            );

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ state ‡πÉ‡∏´‡∏°‡πà
            setLeaves(updatedLeaves);
            setFilteredLeaves(updatedLeaves); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢

            alert(response.data.message); // ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        } catch (error) {
            console.error(error);
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
        }
    };

    return (
        <div>
            <h2>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î</h2>
            
            {/* ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
            <input
                type="text"
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏•‡∏≤"
                value={searchQuery}
                onChange={handleSearch}
            />

            <table>
                <thead>
                    <tr>
                        <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                        <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤</th>
                        <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏•‡∏≤</th>
                        <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                        <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                    </tr>
                </thead>
                <tbody>
                    {filteredLeaves.length > 0 ? (
                        filteredLeaves.map((leave) => (
                            <tr key={leave.id}>
                                <td>{leave.name}</td>
                                <td>{leave.leaveType}</td>
                                <td>{leave.startDate} ‡∏ñ‡∏∂‡∏á {leave.endDate}</td>
                                <td>{leave.status}</td>
                                <td>
                                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö */}
                                    <button onClick={() => handleDelete(leave.id)}>‡∏•‡∏ö</button>
                                    
                                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ */}
                                    {leave.status === "‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤" && (
                                        <>
                                            <button onClick={() => handleApprove(leave.id, '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')}>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</button>
                                            <button onClick={() => handleApprove(leave.id, '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')}>‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</button>
                                        </>
                                    )}
                                </td>
                            </tr>
                        ))
                    ) : (
                        <tr>
                            <td colSpan="5">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td>
                        </tr>
                    )}
                </tbody>
            </table>
        </div>
    );
};

export default LeaveList;
